[
  {
    "role": "user",
    "content": "hi",
    "timestamp": "2025-08-21T04:13:38.086779",
    "metadata": {}
  },
  {
    "role": "assistant",
    "content": "Hello! How can I help you today?",
    "timestamp": "2025-08-21T04:13:39.400105",
    "metadata": {}
  },
  {
    "role": "user",
    "content": "give me python code for snake game",
    "timestamp": "2025-08-21T04:13:51.872386",
    "metadata": {}
  },
  {
    "role": "assistant",
    "content": "Below is a complete, self-contained Snake game implemented with Pygame.  \nSave it as snake.py, make sure Pygame is installed (`pip install pygame`), and run:\n\n```bash\npython snake.py\n```\n\n```python\nimport pygame\nimport sys\nimport random\n\n# --------------------- CONFIGURATION ---------------------\nCELL_SIZE   = 20                       # Size of one square\nGRID_WIDTH  = 30                       # Number of cells horizontally\nGRID_HEIGHT = 20                       # Number of cells vertically\nSCREEN_W    = CELL_SIZE * GRID_WIDTH\nSCREEN_H    = CELL_SIZE * GRID_HEIGHT\nFPS         = 12                       # Game speed (frames per second)\n\nSNAKE_COLOR = ( 50, 200,  50)\nFOOD_COLOR  = (200,  50,  50)\nBG_COLOR    = ( 30,  30,  30)\nGRID_COLOR  = ( 40,  40,  40)\nTEXT_COLOR  = (250, 250, 250)\n# ---------------------------------------------------------\n\npygame.init()\nscreen = pygame.display.set_mode((SCREEN_W, SCREEN_H))\npygame.display.set_caption(\"Snake with Pygame\")\nclock = pygame.time.Clock()\nfont_big  = pygame.font.SysFont(None, 72)\nfont_small= pygame.font.SysFont(None, 32)\n\n# ---------------------------------------------------------\ndef draw_grid():\n    for x in range(0, SCREEN_W, CELL_SIZE):\n        pygame.draw.line(screen, GRID_COLOR, (x, 0), (x, SCREEN_H))\n    for y in range(0, SCREEN_H, CELL_SIZE):\n        pygame.draw.line(screen, GRID_COLOR, (0, y), (SCREEN_W, y))\n\ndef random_food_pos(snake):\n    while True:\n        pos = (random.randrange(GRID_WIDTH), random.randrange(GRID_HEIGHT))\n        if pos not in snake:\n            return pos\n\ndef show_message(lines, center=True):\n    surface_list = []\n    total_height = 0\n    for text, size in lines:\n        surf = (font_big if size == \"big\" else font_small).render(text, True, TEXT_COLOR)\n        surface_list.append(surf)\n        total_height += surf.get_height()\n    start_y = SCREEN_H // 2 - total_height // 2\n    for surf in surface_list:\n        rect = surf.get_rect(center=(SCREEN_W // 2, start_y + surf.get_height() // 2))\n        screen.blit(surf, rect)\n        start_y += surf.get_height() + 5\n\n# ---------------------------------------------------------\ndef main():\n    snake = [(GRID_WIDTH//2, GRID_HEIGHT//2)]\n    direction = (0, 0)          # Start still until first key\n    food = random_food_pos(snake)\n    score = 0\n    game_over = False\n\n    while True:\n        # ----------- EVENT HANDLING -----------\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit(); sys.exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key in (pygame.K_UP, pygame.K_w)   and direction != (0, 1):\n                    direction = (0, -1)\n                elif event.key in (pygame.K_DOWN, pygame.K_s) and direction != (0, -1):\n                    direction = (0, 1)\n                elif event.key in (pygame.K_LEFT, pygame.K_a) and direction != (1, 0):\n                    direction = (-1, 0)\n                elif event.key in (pygame.K_RIGHT, pygame.K_d)and direction != (-1,0):\n                    direction = (1, 0)\n                elif event.key == pygame.K_RETURN and game_over:\n                    return      # Restart the game\n\n        if not game_over and direction != (0, 0):\n            # ----------- MOVE SNAKE -----------\n            new_head = ((snake[0][0] + direction[0]) % GRID_WIDTH,\n                        (snake[0][1] + direction[1]) % GRID_HEIGHT)\n\n            if new_head in snake:\n                game_over = True\n            else:\n                snake.insert(0, new_head)\n                if new_head == food:\n                    score += 1\n                    food = random_food_pos(snake)\n                else:\n                    snake.pop()\n\n        # --------------- DRAW ----------------\n        screen.fill(BG_COLOR)\n        draw_grid()\n\n        for x, y in snake:\n            pygame.draw.rect(screen, SNAKE_COLOR,\n                             (x*CELL_SIZE, y*CELL_SIZE, CELL_SIZE, CELL_SIZE))\n        fx, fy = food\n        pygame.draw.rect(screen, FOOD_COLOR,\n                         (fx*CELL_SIZE, fy*CELL_SIZE, CELL_SIZE, CELL_SIZE))\n\n        # Score\n        score_surf = font_small.render(f\"Score: {score}\", True, TEXT_COLOR)\n        screen.blit(score_surf, (8, 8))\n\n        # Game over overlay\n        if game_over:\n            show_message([(\"Game Over\", \"big\"),\n                          (f\"Score: {score}\", \"small\"),\n                          (\"Press Enter to restart\", \"small\")])\n\n        pygame.display.flip()\n        clock.tick(FPS)\n\n# ---------------------------------------------------------\nif __name__ == \"__main__\":\n    while True:\n        main()   # Loop to restart after game over\n```\n\nControls  \n• Arrow keys / WASD to steer the snake  \n• Wrap-around at edges (feel free to remove the modulo `%` if you want walls)  \n• When you collide with yourself the game ends; press Enter to play again.\n\nEnjoy coding (and playing) Snake!",
    "timestamp": "2025-08-21T04:14:07.966317",
    "metadata": {}
  }
]